agent

 agent_exp = fields.Selection([
        ('fresher', 'FRESHER'),
        ('less_one', 'Less Than 1 Yr'),
        ('one_two', 'EXP > 1 year'),
        ('three_four', 'EXP > 3Year'),
        ('professional', 'Professional'),
    ], string="Agent Experience", tracking=True)
    agent_type = fields.Selection([('full_time', 'Full Time'), ('part_time', 'Part Time'), ('intern', 'Intern')],
                                  string="Agent Type", default="full_time")
    agent_language_ids = fields.Many2many('agent.language', string="Agent Language Known", tracking=True,
                                          ondelete="cascade")
    agent_residential = fields.Selection(
        [
            ('east_india', 'BR-UP-MP'),
            ('west_india', 'HR-AP'),
            ('south_india', 'HYD-BNG-KER'),
            ('others', 'OTHERS'),
            ('foreign', 'FOREIGN'),
        ], string="Agent Residential"
    )

    agents_ids=fields.One2many('estate.property.offer','offer_agent_id', domain=[('status', 'in', ['accepted'])])
    efficiency = fields.Integer(string="Language Efficiency", compute='_compute_efficiency')
    proficient_level = fields.Selection([
        ('intermediate', 'Intermediate'),
        ('beginner', 'Beginner'),
        ('professional', 'Professional'),
    ], string="Language Efficiency", required=True, Tracking=True)
    agent_offers_ids = fields.One2many('real.estate', 'agent_id', ondelete='cascade', tracking=True)
@api.depends('proficient_level')
    def _compute_efficiency(self):
        for rec in self:
            if rec.proficient_level == 'intermediate':
                efficiency = random.randrange(45, 70)
            elif rec.proficient_level == 'beginner':
                efficiency = random.randrange(20, 45)
            elif rec.proficient_level == 'professional':
                efficiency = random.randrange(70, 100)
            else:
                efficiency = 0
            rec.efficiency = efficiency


ofer


 price = fields.Float()
    status = fields.Selection([('accepted', 'Accepted'), ('refused', 'Refused')], string="State", copy=False,store=True)
    validity = fields.Integer(string="Validity", default=7)
    deadline = fields.Date(string="Date Deadline", compute='_compute_deadline', inverse='_inverse_deadline', store=True)
    '''Relational Fields'''
    partner_id = fields.Many2one('res.partner', required=True, ondelete='cascade')
    # email_id=fields.Many2one('res.partner',ondelete='cascade')
    property_id = fields.Many2one('real.estate', required=True, ondelete='cascade',store=True)
    property_type_id = fields.Many2one('estate.property.type', string="Properties",
                                       related='property_id.property_type_id', store=True, ondelete='cascade')

    offer_agent_id=fields.Many2one('agent.view',string="Agent")

    @api.depends('create_date', 'validity')
    def _compute_deadline(self):
        for rec in self:
            today = fields.Date.today()
            if rec.create_date:
                rec.deadline = today + timedelta(rec.validity)
            else:
                # rec.deadline = today + timedelta(days=7)
                self.write({'deadline': today + timedelta(rec.validity)})

    @api.depends('deadline')
    def _inverse_deadline(self):
        today = fields.Date.today()
        for rec in self:
            numday = rec.deadline - today
            rec.validity = numday.days

    def action_accept(self):
        for rec in self:
            checks = rec.property_id.offer_ids.mapped('status')
            if 'accepted' in checks:
                raise ValidationError("Sorry ! not Possible to Accept Multiple OfferðŸš«")
            else:
                self.status = 'accepted'
                self.property_id.selling_price = rec.price
                self.property_id.sale_buyer = rec.partner_id
                self.property_id.sale_buyer_email = rec.partner_id.email
                self.property_id.state = 'offer_accepted'
            if rec.price < (self.property_id.expected_price * 90) / 100:
                raise ValidationError(_("WARNING....\n  Selling Price Must be at Least 90% of Expected Price!!ðŸš«"))
        return {
            'effect': {
                'fadeout': 'slow',
                'message': "hooray!!! \n Your Offer has been Accepted  !",
                'type': 'rainbow_man',
            }
        }

    def action_refused(self):
        for rec in self:
            self.status = 'refused'
            self.property_id.selling_price = 0
            self.property_id.sale_buyer = False
        return {
            'effect': {
                'fadeout': 'fast',
                'message': "Oops!!!  Offer Rejected",
                'type': 'rainbow_man',
            }
        }

    @api.constrains('price')
    def check_offer_price(self):
        for rec in self:
            if rec.price < 0:
                raise ValidationError(_("Warning....\n Offered Price should Never Non Positive!!!!"))

    @api.model
    def create(self, vals):
        res = super(EstatePropertyOffer, self).create(vals)
        for rec in res.property_id.offer_ids:
            if vals.get('price') < rec.price:
                raise ValidationError(_("WARNING...\n Added Price must me Larger than Higher Offered PriceðŸš«"))
        return res


propRTY TYPR

offer_counts = fields.Integer(compute="_compute_offer")

    @api.depends('property_ids.name')
    def _compute_offer(self):
        for rec in self:
            rec.offer_counts = self.env['estate.property.offer'].search_count([('property_type_id', '=', rec.id)])


PROPARTY


 state = fields.Selection([
        ('new', 'New'),
        ('offer_received', 'Offer Received'),
        ('offer_accepted', 'Offer Accepted'),
        ('sold', 'Sold'),
        ('cancel', 'Cancelled')],
        string="Status", tracking=True, default='new', readonly=True)
    sales_person = fields.Many2one('res.users', string="Salesman", default=lambda self: self.env.user, tracking=True,
                                   ondelete='cascade')
    sales_person_email = fields.Char(string="Seller_Email", related='sales_person.email', tracking=True)
    sale_buyer = fields.Many2one('res.partner', string="Buyer", tracking=True, ondelete='cascade')
    sale_buyer_email = fields.Char(string='Buyer Mail')
    offer_ids = fields.One2many('estate.property.offer', 'property_id', ondelete='cascade', store=True)
    total_area = fields.Integer(string="Total Area(sqm)", compute='_compute_total_area', tracking=True, readonly=True,
                                store=True)
    best_offer = fields.Float(compute='_compute_best_offer', string="Best Offered", readonly=True, deafult=0.0,
                              store=True)
    progress = fields.Integer(string="progress", compute="_compute_progress", store=True)
    price = fields.Float(related='offer_ids.price')  # For Demonstrate > Not Uses
    image = fields.Image(string="Upload Property Image")

    '''Agents Detils Fields'''
    agent_id = fields.Many2one('agent.view', string="Agent", ondelte='cascade', tracking=True)
    agent_mail = fields.Char(string="Agent mail Id", related="agent_id.agent_mail", tracking=True)
    agent_address = fields.Char(string="Agent Address", related='agent_id.agent_address', tracking=True)
    agent_phone = fields.Char(string="Agent Phone:", related='agent_id.agent_phone', tracking=True)
    agent_pic = fields.Image(string="Agent Image", related='agent_id.agent_pic', tracking=True)
    sell_month_expected = fields.Selection([
        ('days', 'Within 15days'),
        ('1month', 'Within 1Month'),
        ('2month', 'Within 2Month'),
        ('3month', 'More-Than 3month'),
    ])
    password = fields.Char(string="Password")

    '''below field For smart button '''
    count_offer = fields.Integer(compute="_compute_count_offer", store=True)
    whatsapp_chat = fields.Char(compute="_compute_whatsapp_chat")
    count_tags = fields.Integer(compute="_compute_count_tags")
    invoice = fields.Char(compute="_compute_invoice")
    model_viewer_pic = fields.Binary(string='3D Model Rendering',store=True)


    def action_solds(self):
        for rec in self:
            if rec.state == 'cancel':
                raise ValidationError(_("Operation not possible to sold in Cancel state"))
            else:
                return {
                    'res_model': 'real.estate',
                    'res_id': rec.id,
                    'view_id': self.env.ref('real_estate.view_advertise_form').id,
                    'context': {'default_password': rec.password},
                }

    def action_verify_password(self):
        pswd = "admin"
        for rec in self:
            entered_password = rec.password
            if entered_password == pswd:
                rec.state = 'sold'
                return {
                    'effect': {
                        'fadeout': 'slow',
                        'message': "Congratulations! Property has been Sold!",
                        'type': 'rainbow_man',
                    }
                }
            else:
                raise ValidationError(_("Incorrect Credential Entered!!"))
        return True

    @api.depends('living_area', 'garden_area')
    def _compute_total_area(self):
        total = 0
        for rec in self:
            total = rec.living_area + rec.garden_area
        self.total_area = total

    #  1st way for check maximum best offer give by Clients(Create Button Not Work When it apply)
    # @api.depends('offer_ids.price')
    # def _compute_best_offer(self):
    #     for rec in self:
    #         self.best_offer = max(rec.offer_ids.mapped('price'))

    # 2nd way for check maximum best offer give by Clients
    @api.depends('offer_ids.price')
    def _compute_best_offer(self):
        com = 0.0
        for rec in self.offer_ids:
            if rec.price > com:
                com = rec.price
        self.best_offer = com

    @api.onchange('garden')
    def _onchange_garden(self):
        for rec in self:
            if rec.garden == 1:
                self.garden_area = 10
                self.garden_orientation = "north"
            if rec.garden == 0:
                self.garden_area = 0
                rec.garden_orientation = False

    def action_cancel(self):
        for rec in self:
            if self.state == 'sold':
                raise ValidationError(_("You can not Cancel a Property After Sold!!"))
            else:
                self.state = 'cancel'
        return True

    def action_reset_new(self):
        for rec in self:
            if self.state != 'cancel':
                raise ValidationError(_("RESET is Possible only in Cancel State"))
            else:
                self.state = 'new'
        return True

    def action_offer_received(self):
        for rec in self:
            if self.state in ['sold', 'cancel']:
                raise ValidationError(_("You can not Cancel a Property After Sold!!"))
            else:
                self.state = 'offer_received'
        return True

    def action_offer_accept(self):
        for rec in self:
            if self.state in ['sold', 'cancel']:
                raise ValidationError(_("You can not Cancel a Property After Sold!!"))
            else:
                self.state = 'offer_accepted'
        return True

    @api.constrains('postcode')
    def check_postcode(self):
        for rec in self:
            if len(rec.postcode) != 6:
                raise ValidationError(_("INVALID POSTCODE ,\n Please Enter Correct Postcode"))

    @api.constrains('expected_price')
    def check_expected_price(self):
        for rec in self:
            if rec.expected_price <= 0:
                raise ValidationError(_("WARNING....Expected Price Must be Positive Number!!ðŸš«"))

    def unlink(self):
        for rec in self:
            if rec.state not in ['new', 'cancel']:
                raise ValidationError(_("WARNING....\n Deletion is possible only in New or Cancel State"))
            return super(RealEstate, self).unlink()

        # whatsapp_Chat

    def action_share_whatsapp(self):
        if not self.agent_id.agent_phone:
            raise ValidationError('Sorry! Missing Phone Number for agent')
        message = 'Hi! *%s* ,You have assigned To a New Property *%s*\n Please check Your Profile for more Info.' % (
            self.agent_id.agent_name, self.name)
        whatsapp_api_url = 'https://api.whatsapp.com/send?phone=%s&text=%s' % (self.agent_id.agent_phone, message)
        self.message_post(body=message, subject="whatsapp Message")
        return {
            'type': 'ir.actions.act_url',
            'target': 'new',
            'url': whatsapp_api_url
        }

    @api.depends('state')
    def _compute_progress(self):
        for rec in self:
            if rec.state == 'new':
                progress = random.randrange(1, 25)
            elif rec.state == 'offer_received':
                progress = random.randrange(25, 50)
            elif rec.state == 'offer_accepted':
                progress = random.randrange(50, 75)
            elif rec.state == "sold":
                progress = 100
            else:
                progress = 0
            rec.progress = progress

    @api.model
    def create(self, vals):
        if not vals.get('state'):
            vals['state'] = 'offer_received'
        return super(RealEstate, self).create(vals)

    @api.depends('agent_phone')
    def _compute_whatsapp_chat(self):
        for rec in self:
            if rec.agent_phone:
                self.whatsapp_chat = "Available"
            else:
                self.whatsapp_chat = "Unavailable"

    @api.depends('tag_ids')
    def _compute_count_tags(self):
        # local = 0
        for rec in self:
            result = len(rec.tag_ids)
        self.count_tags = result

    @api.depends('offer_ids.partner_id')
    def _compute_count_offer(self):
        for rec in self:
            rec.count_offer = self.env['estate.property.offer'].search_count([('property_id', '=', rec.id)])

    @api.depends('state')
    def _compute_invoice(self):
        for rec in self:
            if rec.state == 'sold':
                self.invoice = 'Created'
            else:
                self.invoice = 'UnCreated'

    def action_count_offer(self):
        return {
            'name': _('Total Offered'),
            'view_mode': 'list',
            'type': 'ir.actions.act_window',
            'domain': [('property_id', '=', self.id)],
            'res_model': 'estate.property.offer',
            'target': 'current',
        }

    def action_whatsapp_chat(self):
        if not self.agent_id.agent_phone:
            raise ValidationError('Sorry! Missing Phone Number for agent')
        message = 'Hi! *%s* ,I hope you are Doing Well' % (self.agent_id.agent_name)
        whatsapp_api_url = 'https://api.whatsapp.com/send?phone=%s&text=%s' % (self.agent_id.agent_phone, message)
        self.message_post(body=message, subject="whatsapp Message")
        return {
            'type': 'ir.actions.act_url',
            'target': 'new',
            'url': whatsapp_api_url
        }

    def action_count_tags(self):
        return {
            'name': _('Tags'),
            'view_mode': 'list',
            'type': 'ir.actions.act_window',
            # 'domain': [('tag_ids', 'in', self.id)],
            'res_model': 'property.type.tag',
            'target': 'current',
        }

    def action_invoice_status(self):
        if self.state == 'sold':
            return {
                'name': _('Invoice'),
                'view_mode': 'list,form',
                'type': 'ir.actions.act_window',
                'res_model': 'account.move',
                'target': 'current',
            }
        else:
            raise ValidationError(_("Invoice Not Created for this Property!!ðŸ›‘"))

    def send_email(self):
        self.ensure_one()
        ir_model_data = self.env["ir.model.data"]
        template_id = ir_model_data.env.ref("real_estate.email_estate_view")
        try:
            compose_form_id = ir_model_data.env.ref(
                "mail.email_compose_message_wizard_form"
            )
        except ValueError:
            compose_form_id = False

        mail_notification_layout = (
            "mail.mail_notification_layout_with_responsible_signature"
        )

        ctx = dict(self.env.context or {})
        ctx.update(
            {
                "default_model": "real.estate",
                "active_model": "real.estate",
                "active_id": self.ids[0],
                "default_res_id": self.ids[0],
                "default_use_template": bool(template_id),
                "default_template_id": template_id.id,
                "default_composition_mode": "comment",
                "default_email_layout_xmlid": mail_notification_layout,
                "force_email": True,
                "mark_rfq_as_sent": True,
            }
        )
        lang = self.env.context.get("lang")
        if {"default_template_id", "default_model", "default_res_id"} <= ctx.keys():
            template = self.env["mail.template"].browse(ctx["default_template_id"])
            if template and template.lang:
                lang = template._render_lang([ctx["default_res_id"]])[
                    ctx["default_res_id"]
                ]

        self = self.with_context(lang=lang)
        if self.state in ["new", "sold"]:
            ctx["model_description"] = _("Request for Quotation")
        else:
            ctx["model_description"] = _("Sale Order")

        return {
            "name": _("Compose Email"),
            "type": "ir.actions.act_window",
            "view_mode": "form",
            "res_model": "mail.compose.message",
            "views": [(compose_form_id.id, "form")],
            "view_id": compose_form_id.id,
            "target": "new",
            "context": ctx,
        }


"""forPrint PDF report through custom button created"""
# def print_reports(self):
#     return self.env.ref('real_estate.action_report_property').report_action(self)


from odoo import api, fields, models, _

class PropertyValuation(models.TransientModel):
    _name = 'property.valuation'
    _description = 'Property Valuation'

    property_value_id = fields.Many2one('real.estate', string='Property')
    bedrooms = fields.Integer(related='property_value_id.bedrooms', string='Bedrooms', readonly=True)
    living_area = fields.Integer(related='property_value_id.living_area', string="Living Area (sqm)", readonly=True)
    garden = fields.Boolean(related='property_value_id.garage', string='Garden', readonly=True)
    total_area = fields.Integer(related='property_value_id.total_area', string="Total Area (sqm)", readonly=True)
    property_type_id = fields.Many2one(related='property_value_id.property_type_id', readonly=True)
    expected_price = fields.Float(related='property_value_id.expected_price', readonly=True)
    tag_ids = fields.Many2many(related='property_value_id.tag_ids', readonly=True)
    evaluate_price = fields.Float(string="Valuated Price", readonly=True)

    @api.multi
    def _calculate_price(self, price_per_unit):
        for rec in self:
            if rec.living_area:
                rec.evaluate_price = price_per_unit * rec.living_area
            else:
                rec.evaluate_price = price_per_unit * rec.total_area

    @api.multi
    def action_valuate_property(self, price_per_unit):
        self._calculate_price(price_per_unit)
        message = f"{self.evaluate_price} is the evaluated price for this property based on living area!"
        return self._display_result(message)

    @api.multi
    def action_valuate_property_indian_rupees(self):
        return self.action_valuate_property(6460)

    @api.multi
    def action_valuate_property_usd_dollar(self):
        return self.action_valuate_property(88)

    @api.model
    def _display_result(self, message):
        return {
            'name': _('Property Valuation Result'),
            'view_mode': 'form',
            'type': 'ir.actions.act_window',
            'res_model': 'property.valuation',
            'target': 'new',
            'effect': {
                'fadeout': 'medium',
                'message': message,
                'type': 'rainbow_man',
            }
        }
<?xml version="1.0" encoding="utf-8"?>
<odoo>

    <record id="wizard_valuation_form" model="ir.ui.view">
        <field name="name">wizard.valuation.form</field>
        <field name="model">property.valuation</field>
        <field name="arch" type="xml">
            <form>
                <sheet>
                    <group>
                        <group>
                            <field name="Property_value_id" placeholder="Pick Property Name"/>
                            <field name="property_type_id" placeholder="Property Type "/>
                            <field name="tag_ids" placeholder="Property Type" widget="many2many_tags"
                                   options="{'color_field':'color'}"/>
                            <field name="living_area" placeholder="Bedroom Area(sqm)"/>
                            <field name="bedrooms"/>

                        </group>
                        <group>
                            <field name="garden" string="Garden Availability"/>
                            <field name="total_area" string="Total Area : "/>
                            <field name="expected_price" string="Expectation Price"/>
                                <field name="evaluate_price" string="Evaluated Price"
                                       style="font-weight:bold;color:green;font-size:medium;"/>
                        </group>
                    </group>
                </sheet>
                <footer>

                    <button name="action_valuate_property" string=" Evaluate Price(Rupees)" type="object"
                            class="fa fa-rupee btn-warning"/>
                    <button name="action_valuate_property_dollor" string=" Evaluate Price(Dollor $)" type="object"
                            class="fa fa-usd btn-success"/>


                    <button name="action_close" type="object" string="  Close" class="fa fa-times btn-danger"
                            help="Closed This Wizard PopUp"/>

                </footer>
            </form>
        </field>
    </record>

    <record id="wizard_valuation_menu" model="ir.actions.act_window">
        <field name="name">Property Valuation</field>
        <field name="type">ir.actions.act_window</field>
        <field name="res_model">property.valuation</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
    </record>

    <menuitem
            id="wizard_valuation_id"
            name="Property Valuation"
            parent="wizard_main_id"
            action="wizard_valuation_menu"
            sequence="12"
    />
</odoo>


class WizardValidationEstate(models.TransientModel):
    _name = 'wizard.validation.estate'
    _description = 'Property Validation'

    start_date = fields.Date(string="From: ", required=1)
    end_date = fields.Date(string="To: ", required=True)
    property_buyer = fields.Many2one('res.partner', string="Buyer Name")
    total_property = fields.Integer(string="Total Property", readonly=True)
    total_amount = fields.Float(string="Total Property Amount", readonly=True)
    download_format = fields.Selection([('csv', 'CSV'), ('pdf', 'PDF')], string='Download Format', default='csv')

    def action_validate_property(self):
        domain = [('create_date', '>=', self.start_date), ('create_date', '<=', self.end_date)]

        count = self.env['real.estate'].search(domain)
        total = count.mapped('selling_price')
        total_amount = sum(total)
        total_property = len(total)
        self.write({'total_property': total_property, 'total_amount': total_amount})
        return {
            'name': _('Total Property Created Within Given Date'),
            'view_mode': 'form',
            'type': 'ir.actions.act_window',
            'res_id': self.id,
            'res_model': 'wizard.validation.estate',
            'target': 'new',
            'effect': {
                'fadeout': 'medium',
                'message': f"{total_property} Property Record Fetched Successfully!!! ",
                'type': 'rainbow_man',
            }
        }

    def action_cancel(self):
        return {
            'effect': {
                'fadeout': 'fast',
                'message': "Closed!!! \n Successfully Closed Wizard ðŸ˜¡",
                'type': 'rainbow_man',
            }
        }

    @api.constrains('end_date')
    def check_end_date(self):
        today = fields.Date.today()
        if self.end_date > today:
            raise ValidationError(_("Input Error in End Date Field \n You can Choose end Date Till Today"))

    def generate_csv_data(self, records):
        csv_data = io.StringIO()
        csv_writer = csv.writer(csv_data)
        header = ['Property Name', 'Price', 'Status', 'date_availability', 'Postcode', 'Bedrooms',
                  'living_area']
        csv_writer.writerow(header)

        for record in records:
            data_row = [record.name, record.selling_price, record.state,
                        record.date_availability,
                        record.postcode, record.bedrooms, record.living_area]
            csv_writer.writerow(data_row)

        return csv_data.getvalue().encode('utf-8')

    def generate_pdf_data(self, records):

        from reportlab.lib.pagesizes import letter
        from reportlab.pdfgen import canvas

        pdf_data = io.BytesIO()
        c = canvas.Canvas(pdf_data, pagesize=letter)
        c.drawString(100, 750, "Property Name     Price    Status  Date Availability  Living Areas")  # Header

        y = 730  # Initial Y position
        for record in records:
            data_row = f"{record.name} - {record.selling_price} - {record.state} - {record.date_availability} - {record.living_area}"
            c.drawString(100, y, data_row)
            y -= 20  # Adjust the Y position for the next row

        c.save()
        pdf_data.seek(0)

        return pdf_data.getvalue()

    def action_download_data(self):
        domain = [('create_date', '>=', self.start_date), ('create_date', '<=', self.end_date)]
        records = self.env['real.estate'].search(domain)

        if self.download_format == 'csv':
            data = self.generate_csv_data(records)
            file_name = 'real_estate_records.csv'
            content_type = 'text/csv'
        elif self.download_format == 'pdf':
            data = self.generate_pdf_data(records)
            file_name = 'real_estate_records.pdf'
            content_type = 'application/pdf'
        else:
            raise ValueError('Invalid download format')

        attachment = self.env['ir.attachment'].create({
            'name': file_name,
            'type': 'binary',
            'datas': base64.b64encode(data),
            'res_model': 'real.estate.download.wizard',
            'res_id': self.id,
        })

        return {
            'type': 'ir.actions.act_url',
            'url': f'/web/content/{attachment.id}?download=true',
            'target': 'self',
            'effect': {
                'fadeout': 'medium',
                'message': f" Your {self.download_format} File Downloaded Successfully!",
                'type': 'rainbow_man',
            }
        }



<?xml version="1.0" encoding="utf-8"?>
<odoo>

    <record id="wizard_estate_form" model="ir.ui.view">
        <field name="name">wizard.estate.form</field>
        <field name="model">wizard.validation.estate</field>
        <field name="arch" type="xml">
            <form>
                <sheet>
                    <group>
                        <group>
                            <field name="start_date" placeholder="Start searching date"/>
                            <field name="property_buyer" placeholder="Choose Any Buyer Name ! NOT MANDATORY"/>
                            <field name="download_format"/>
                        </group>
                        <group>
                            <field name="end_date" placeholder="Choose From Calendar "/>
                            <field name="total_property" string="Total Property : "/>
                            <field name="total_amount" string="Total Amount : "/>
                        </group>
                    </group>
                </sheet>
                <footer>

                    <button name="action_validate_property" type="object" class="fa fa-eye btn-warning"/>
                    <button name="action_download_data" type="object" class="fa fa-download btn-success"
                            help="Download The Filtered Record "/>
                    <button name="action_cancel" type="object" class="fa fa-times btn-danger"
                            help="Closed This Wizard PopUp"/>

<!--                    <button name="action_validate_property" type="object" string="View Property" class="oe_highlight"/>-->

<!--                    <button name="action_download_data" string="Download Record" type="object" class="oe_highlight"/>-->
<!--                    <button name="action_cancel" type="object" string="Close" class="btn btn-primary mr-1"/>-->

                </footer>
            </form>
        </field>
    </record>

    <record id="wizard_real_estate_menu" model="ir.actions.act_window">
        <field name="name">Total Property Validation</field>
        <field name="type">ir.actions.act_window</field>
        <field name="res_model">wizard.validation.estate</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
    </record>

     <menuitem
            id="wizard_main_id"
            name="Validation &amp; Valuation"
            parent="real_estate.menu_root"
            sequence="10"
    />

    <menuitem
            id="wizard_menu_id"
            name="Wizard Validation"
            parent="wizard_main_id"
            action="wizard_real_estate_menu"
            sequence="11"
    />
</odoo>

<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_offer_tree" model="ir.ui.view">
        <field name="name">estate.property.offer.tree</field>
        <field name="model">estate.property.offer</field>
        <field name="arch" type="xml">
            <tree editable="bottom" decoration-success="status == 'accepted'" decoration-danger="status == 'refused'">
                <field name="property_id" string="Property Name"/>
                <field name="price" string="Price" widget="monospace"/>
                <field name='status' string="Status" optional="hide"/>
                <field name="partner_id" string="Partner"/>
                <field name="validity" string="Validity"/>
                <field name="deadline" optional="hide"/>
            </tree>
        </field>
    </record>

    <record id="view_offer_search" model="ir.ui.view">
        <field name="name">estate.property.offer.search</field>
        <field name="model">estate.property.offer</field>
        <field name="arch" type="xml">
            <search>
                <field name="partner_id" />
                <field name="validity"/>
                <filter name="filter_accepted" string="Accepted Property" domain="[('status','=','accepted')]"/>
                <filter name="filter_refused" string="Refused Property" domain="[('status','=','refused')]"/>
            </search>
        </field>
    </record>
    <record id="view_offer_form" model="ir.ui.view">
        <field name="name">estate.property.offer.form</field>
        <field name="model">estate.property.offer</field>
        <field name="arch" type="xml">
            <form>
            </form>
        </field>
    </record>

    <record id="action_property_offer" model="ir.actions.act_window">
        <field name="name">PROPERTY OFFERS</field>
        <field name="type">ir.actions.act_window</field>
        <field name="res_model">estate.property.offer</field>
        <field name="view_mode">tree,form,search</field>
        <field name="context">{}</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                No Offers Provides Till Yet , Please Wait.....
            </p>
        </field>
    </record>
</odoo>


<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!--For server action -->
    <record model="ir.actions.server" id="action_real_estate2">
        <field name="name">Confirm Sold</field>
        <field name="type">ir.actions.server</field>
        <field name="model_id" ref="real_estate.model_real_estate"/>
        <field name="binding_model_id" ref="real_estate.model_real_estate"/>
        <field name="binding_view_types">form</field>
        <field name="state">code</field>
        <field name="code">
            records.action_solds()
        </field>
    </record>

    <record id="view_advertise_tree" model="ir.ui.view">
        <field name="name">real.estate.tree</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">

            <tree sample="1" decoration-warning="state == 'offer_received'"
                  decoration-success="state == 'offer_accepted'" decoration-danger="state in ['cancel' , 'new']"
                  decoration-muted="state == 'sold'">
                <field name="name" decoration-bf="1"/>
                <field name="postcode" optional="hide"/>
                <field name="bedrooms" optional="hide"/>
                <field name="living_area"/>
                <field name="expected_price"/>
                <field name="selling_price" decoration-bf="1"/>
                <field name="date_availability" optional="hide"/>
                <field name="state"/>
                <field name="tag_ids" widget="many2many_tags" options="{'color_field':'color'}"/>
                <field name="progress" widget="percentpie"/>
            </tree>

        </field>
    </record>
    <record model="ir.ui.view" id="view_estate_graph">
        <field name="name">real.estate.graph</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">
            <graph string="Real Estates" sample="1" type="pie">
                <field name="name"/>
                <!--                    <field name="progress" type="measure"/>-->
                <field name="expected_price" type="measure"/>
            </graph>
        </field>
    </record>

    <record id="view_estate_search" model="ir.ui.view">
        <field name="name">real.estate.search</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">
            <search>
                <field name="living_area"/>
                <field name="name"/>
                <field name="bedrooms"/>
                <field name="postcode"/>
                <field name="offer_ids" string="Offer_Ids" filter_domain="[('offer_ids.status','ilike',self)]"/>

                <!--                <filter name="filter_state" string="Cancelled " domain="[('state','=','cancel')]"/>-->
                <filter name="filter_active" string="All Property"
                        domain="['|', ('active', '=', True), ('active', '=', False)]"/>
                <group expand="0" string="Group By">
                    <filter string="Postcode" name="group_by_postcode" context="{'group_by': 'postcode'}"/>
                    <!--                    <filter string="Garden" name="group_by_garden" context="{'group_by': 'garden'}"/>-->
                    <filter string="Property Type" name="group_by_property" context="{'group_by': 'property_type_id'}"/>
                    <filter string="Offers" name="group_by_offers" context="{'group_by': 'tag_ids'}"/>
                </group>
            </search>

        </field>
    </record>
    <record model="ir.ui.view" id="view_estate_kanban">
        <field name="name">real.estate.kanban</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">
            <kanban default_group_by="property_type_id" records_draggable="0" class="o_modules_kanban">
                <field name="id"/>
                <templates>
                    <t t-name="kanban-box">
                        <div class="oe_kanban_global_click"
                             style="height:135px;background-color:#ccff99;color:#006600;">
                            <h3 style="color:red;">
                                <field name="name"/>
                            </h3>
                            <div style="width:30%;float:right;display:inline-block;">
                                <img alt="avtar" t-att-src="kanban_image('real.estate','image',record.id.raw_value)"
                                     style="width:80px;height:95px;margin-top:-20px;"/>
                            </div>
                            <div style="width:70%;float:left;display:inline-block;">
                                <ul style="list-style-type:none;">
                                    <li>
                                        <b>Expected Price:</b>
                                        <field name="expected_price"/>
                                    </li>
                                    <li>
                                        <b>Selling Price:</b>
                                        <field name="selling_price"/>
                                    </li>
                                    <li>
                                        <field name="tag_ids"/>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>

    <record model="ir.ui.view" id="estate_view_calendar">
        <field name="name">estate.view.calendar</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">
            <calendar string="Estate View" date_start="date_availability" mode="month" color="state"
                      quick_add="False" event_limit="4">
                <field name="name"/>
                <field name="state"/>
            </calendar>
        </field>
    </record>

    <record id="view_advertise_form" model="ir.ui.view">
        <field name="name">real.estate.form</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">

            <form>
                <header>
                    <button name="send_email" type="object" string="Send By Email"
                            attrs="{'invisible':[('state','in', ['new','offer_received'])]}"/>
                    <button name="action_share_whatsapp" type="object" string="Notify on Whatsapp"
                    />

                    <button name="action_offer_received" string="Offer Received" type="object" class="btn-primary"
                            attrs="{'invisible':[('state','not in', 'new')]}"/>
                    <button name="action_offer_accept" string="Offer Accept" type="object" class="btn-primary"
                            attrs="{'invisible':[('state','not in', ['new','offer_received'])]}"/>
                    <button name="action_cancel" string="Cancel" type="object" class="btn-primary"
                            attrs="{'invisible':[('state','in', ['cancel'])]}"/>
                    <button name="action_solds" string="Sold" type="object" class="btn-primary"
                            attrs="{'invisible':[('state','in', ['sold'])]}"/>
                    <button name="action_reset_new" string="RESET STATE" type="object" class="btn-primary"
                            attrs="{'invisible':[('state','not in', 'cancel')]}"/>

                    <!--                    <button name="print_reports" string="Print" type="object" class="btn-primary"-->
                    <!--                            attrs="{'invisible':[('state','not in',['sold','offer_accepted'])]}"/>-->
                    <field name="state" widget="statusbar" nolabel="1" options="{'clickable': '1'}"/>
                </header>
                <sheet>
                    <div class="oe_button_box" name="button_box">

                        <button class="oe_stat_button" type="object" name="action_invoice_status" icon="fa-file-text-o"
                                attrs="{'invisible': [('state', '=', 'new')]}">
                            <field name="invoice" widget="statinfo" string="Invoice Status"
                                   style="font-weight: bold;"/>
                        </button>

                        <button class="oe_stat_button" type="object" name="action_whatsapp_chat" icon="fa-whatsapp">
                            <field name="whatsapp_chat" widget="statinfo" string="Let's Chat"
                                   style="font-weight: bold;"/>
                        </button>

                        <button class="oe_stat_button" type="object" name="action_count_tags" icon="fa-tags">
                            <field name="count_tags" widget="statinfo" string="Tagged Property"
                                   style="font-weight: bold;"/>
                        </button>

                        <button class="oe_stat_button" type="object" name="action_count_offer" icon="fa-ticket"
                                attrs="{'invisible': [('state', '=', 'new')]}">
                            <field name="count_offer" widget="statinfo" string="Offers" style="font-weight: bold;"/>
                        </button>


                    </div>

                    <widget name="web_ribbon" title="New" bg_color="bg-danger"
                            attrs="{'invisible':[('state','not in','new')]}"/>
                    <widget name="web_ribbon" title="Offer Received" bg_color="bg-info"
                            attrs="{'invisible':[('state','not in','offer_received')]}"/>
                    <widget name="web_ribbon" title="Offer Accept" bg_color="bg-success"
                            attrs="{'invisible':[('state','not in','offer_accepted')]}"/>
                    <widget name="web_ribbon" title="Sold" bg_color="bg-warning"
                            attrs="{'invisible':[('state','not in','sold')]}"/>
                    <widget name="web_ribbon" title="Cancelled" bg_color="bg-danger"
                            attrs="{'invisible':[('state','not in','cancel')]}"/>
                    <group>
                        <div class="oe_title">
                            <h2>
                                <label for="name" string="Title" class="oe_edit_only"/>
                                <field name="name"
                                       style="border-radius:10px;width:60%;height:30px; background-color:honeydew;text-align:center;font-weight:bold;"/>
                            </h2>
                        </div>
                        <group>
                            <field name="image" widget="image" class="oe_avatar"/>
                        </group>
                    </group>
                    <group>
                        <group>
                            <field name="tag_ids" widget="many2many_tags"
                                   options="{'color_field':'color' ,'no_create_edit':True,'no_create':True}"/>
                            <field name="property_type_id" string="Property Type"
                                   options="{'no_create_edit':True,'no_create':True}"/>
                            <field name="postcode" string="Postcode" style="border-radius:6px;border:1px solid blue;"/>
                        </group>
                        <group>
                            <field name="expected_price" string="Expected Price"/>
                            <field name="date_availability"/>
                            <field name="selling_price"/>
                            <field name="best_offer"/>

                        </group>
                        <group>

                        </group>
                    </group>

                    <!--                    For Password Validation on click Sale-->
                    <div class="oe_title">
                        <h2 style="font-family:Lobster;color:green;"
                            attrs="{'invisible':[('state','!=','offer_accepted')]}">
                            Please Entered Password Before Sold the Property!!
                        </h2>
                    </div>
                    <group>
                        <field name="password" widget="password" attrs="{'invisible':[('state','!=','offer_accepted')]}"
                               string="Enter Password" placeholder="Please Enter DB Password For Sold The Property"/>
                    </group>
                    <footer>
                        <button string="Verify" attrs="{'invisible':[('state','!=','offer_accepted')]}" type="object"
                                name="action_verify_password" class="btn-primary"/>
                    </footer>

                </sheet>
                <notebook>
                    <page string="Descriptions" name="description">
                        <form>
                            <group>
                                <group>
                                    <field name="description" string="Description" colspan="3"
                                           style="color:red;font-size:14px;font-weight:bold;"/>
                                    <field name="living_area" string="Living Area(sqm)" colspan="3"
                                           style="border-radius:8px;border:1px dotted blue; font-size:15px;font-weight:bold;"/>
                                    <field name="garage" string="Garage" colspan="3"/>
                                    <field name="facades" string="Facades" colspan="3" style="width:50px;"/>
                                    <field name="garden_area" string="Garden Area(Sqm)"
                                           attrs="{'invisible':[('garden','=', False)]}"
                                           style="font-size:15px;font-weight:bold;"/>
                                    <field name="bedrooms" string="Bedroom" colspan="3"/>
                                    <field name="garden" string="Garden"/>
                                    <field name="garden_orientation" string="Orientation" colspan="3"
                                           attrs="{'invisible':[('garden','=', False)]}"/>
                                    <field name="active" string="Active" colspan="3"/>
                                    <br/>
                                    <field name="total_area"/>
                                </group>
                            </group>
                        </form>
                    </page>
                    <page string="Other Info" name="other_info">
                        <form>
                            <group>
                                <group>
                                    <field name="sales_person" string="Sales Person"/>
                                    <field name="sale_buyer" string="Buyer"/>
                                </group>
                                <group>
                                    <field name="sales_person_email" string="Seller Mail"/>
                                    <field name="sale_buyer_email" string="Buyer Mail"/>
                                </group>
                            </group>
                        </form>
                    </page>
                    <page string="Offer">
                        <field name="offer_ids"
                               attrs="{'readonly':[('state', 'in',['offer_accepted','sold','cancel'] )]}">
                            <tree editable="bottom" decoration-success="status=='accepted'"
                                  decoration-danger="status == 'refused'">
                                <field name="property_id" options="{'no_create_edit':True,'no_create':True}"/>
                                <field name="price"/>
                                <field name="partner_id"/>
                                <field name="validity" string="Validity(Days)"/>
                                <field name="deadline" string="Deadline"/>
                                <button name="action_accept" type="object" class="fa fa-check btn-success"
                                        attrs="{'invisible':[('status', '==', 'accepted')]}"/>
                                <button name="action_refused" type="object" class="fa fa-times btn-danger"
                                        attrs="{'invisible':[('status','==' , 'refused')]}"/>
                                <field name="status" string="Status"/>
                            </tree>
                        </field>
                    </page>
                    <page string="Agent Details">
                        <form>
                            <sheet>
                                <group>
                                    <group>
                                        <field name="agent_id" style="color:blue;font-weight:bold;"/>
                                        <field name="agent_mail"/>
                                        <field name="agent_phone"/>
                                    </group>
                                    <group>
                                        <group>
                                            <field name="agent_pic" widget='image'/>
                                            <field name="agent_address"/>
                                            <field name="sell_month_expected"/>
                                        </group>
                                    </group>
                                </group>
                            </sheet>
                        </form>
                    </page>

                    <page string="3D Model Views">
                        <field name="model_viewer_pic" widget="model_viewer" style="width:800px;height:450px;;"/>
                    </page>

                </notebook>
                <div class="oe_chatter">
                    <field name="message_follower_ids" groups="base.group_user"/>
                    <field name="activity_ids"/>
                    <field name="message_ids"/>
                </div>
            </form>
        </field>
    </record>

    <record id="action_real_estate" model="ir.actions.act_window">
        <field name="name">Properties</field>
        <field name="type">ir.actions.act_window</field>
        <field name="res_model">real.estate</field>
        <field name="view_mode">tree,form,search,kanban,graph,calendar</field>
        <field name="context">
            {'search_default_filter_active':1,'search_default_group_by_property':1 }
        </field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create Your first Housing Estate !!
            </p>
        </field>
    </record>
</odoo>


<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>

        <record id="res_users_view_form" model="ir.ui.view">
            <field name="name">res.users.view.form.inherit</field>
            <field name="model">res.users</field>
            <field name="inherit_id" ref="base.view_users_form"/>
            <field name="arch" type="xml">
                <xpath expr="//page[@name='preferences']" position="after">
                    <page name="property_ids" string="Real Estate Property">
                        <field name="property_ids" readonly="1">
                            <tree decoration-warning="state == 'offer_received'"
                                  decoration-info="state == 'offer_accepted'" decoration-danger="state == 'cancel'"
                                  decoration-success="state == 'sold'">
                                <field name="name" decoration-bf="1"/>
                                <field name="postcode" decoration-bf="1"/>
                                <field name="bedrooms" decoration-bf="1"/>
                                <field name="living_area" decoration-bf="1"/>
                                <field name="expected_price" decoration-bf="1"/>
                                <field name="selling_price" decoration-bf="1"/>
                                <field name="state" decoration-bf="1"/>
                            </tree>
                        </field>
                    </page>
                </xpath>
            </field>
        </record>
    </data>

</odoo>

<odoo>
    <data noupdate="0">
        <record id="email_template_real_estate" model="mail.template">
            <field name="name">Real Estate</field>
            <field name="model_id" ref="real_estate.model_real_estate"/>
            <field name="subject">Real Estate Details</field>
            <field name="email_from">{{ user.email }}</field>
            <field name="email_to">{{object.sales_person.email}}</field>
            <field name="body_html" type="html">
                <![CDATA[
                    <div style="font-family: Arial, sans-serif; font-size: 13px;">
                        <p>
                            Dear <strong>{{object.sale_buyer.name or ''}}</strong>,
                            <br/><br/>
                            Congratulations on your awesome property! Here are the details:
                            <br/><br/>
                            <strong>Property Name:</strong> {{object.name or ''}}
                            <br/>
                            <strong>Expected Price:</strong> {{object.expected_price or ''}}
                            <br/>
                            <strong>Property Type:</strong> {{object.property_type_id.property_type or ''}}
                            <br/>
                            <strong>Property Seller:</strong> {{object.sales_person.name or ''}}
                            <br/>
                            <strong>Your Offer to Seller:</strong> {{object.selling_price or ''}}
                            <br/><br/>
                            If you've already received this property, you can ignore this email.
                            <br/><br/>
                            Thanks and Regards,
                            <br/>
                            {{object.sales_person.signature or ''}}
                        </p>
                    </div>
                ]]>
            </field>
        </record>
    </data>
</odoo>
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!--For server action -->
    <record model="ir.actions.server" id="action_real_estate2">
        <field name="name">Confirm Sold</field>
        <field name="type">ir.actions.server</field>
        <field name="model_id" ref="real_estate.model_real_estate"/>
        <field name="binding_model_id" ref="real_estate.model_real_estate"/>
        <field name="binding_view_types">form</field>
        <field name="state">code</field>
        <field name="code">
            records.action_solds()
        </field>
    </record>

    <record id="view_advertise_tree" model="ir.ui.view">
        <field name="name">real.estate.tree</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">

            <tree sample="1" decoration-warning="state == 'offer_received'"
                  decoration-success="state == 'offer_accepted'" decoration-danger="state in ['cancel' , 'new']"
                  decoration-muted="state == 'sold'">
                <field name="name" decoration-bf="1"/>
                <field name="postcode" optional="hide"/>
                <field name="bedrooms" optional="hide"/>
                <field name="living_area"/>
                <field name="expected_price"/>
                <field name="selling_price" decoration-bf="1"/>
                <field name="date_availability" optional="hide"/>
                <field name="state"/>
                <field name="tag_ids" widget="many2many_tags" options="{'color_field':'color'}"/>
                <field name="progress" widget="percentpie"/>
            </tree>

        </field>
    </record>
    <record model="ir.ui.view" id="view_estate_graph">
        <field name="name">real.estate.graph</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">
            <graph string="Real Estates" sample="1" type="pie">
                <field name="name"/>
                <!--                    <field name="progress" type="measure"/>-->
                <field name="expected_price" type="measure"/>
            </graph>
        </field>
    </record>

    <record id="view_estate_search" model="ir.ui.view">
        <field name="name">real.estate.search</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">
            <search>
                <field name="living_area"/>
                <field name="name"/>
                <field name="bedrooms"/>
                <field name="postcode"/>
                <field name="offer_ids" string="Offer_Ids" filter_domain="[('offer_ids.status','ilike',self)]"/>

                <!--                <filter name="filter_state" string="Cancelled " domain="[('state','=','cancel')]"/>-->
                <filter name="filter_active" string="All Property"
                        domain="['|', ('active', '=', True), ('active', '=', False)]"/>
                <group expand="0" string="Group By">
                    <filter string="Postcode" name="group_by_postcode" context="{'group_by': 'postcode'}"/>
                    <!--                    <filter string="Garden" name="group_by_garden" context="{'group_by': 'garden'}"/>-->
                    <filter string="Property Type" name="group_by_property" context="{'group_by': 'property_type_id'}"/>
                    <filter string="Offers" name="group_by_offers" context="{'group_by': 'tag_ids'}"/>
                </group>
            </search>

        </field>
    </record>
    <record model="ir.ui.view" id="view_estate_kanban">
        <field name="name">real.estate.kanban</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">
            <kanban default_group_by="property_type_id" records_draggable="0" class="o_modules_kanban">
                <field name="id"/>
                <templates>
                    <t t-name="kanban-box">
                        <div class="oe_kanban_global_click"
                             style="height:135px;background-color:#ccff99;color:#006600;">
                            <h3 style="color:red;">
                                <field name="name"/>
                            </h3>
                            <div style="width:30%;float:right;display:inline-block;">
                                <img alt="avtar" t-att-src="kanban_image('real.estate','image',record.id.raw_value)"
                                     style="width:80px;height:95px;margin-top:-20px;"/>
                            </div>
                            <div style="width:70%;float:left;display:inline-block;">
                                <ul style="list-style-type:none;">
                                    <li>
                                        <b>Expected Price:</b>
                                        <field name="expected_price"/>
                                    </li>
                                    <li>
                                        <b>Selling Price:</b>
                                        <field name="selling_price"/>
                                    </li>
                                    <li>
                                        <field name="tag_ids"/>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>

    <record model="ir.ui.view" id="estate_view_calendar">
        <field name="name">estate.view.calendar</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">
            <calendar string="Estate View" date_start="date_availability" mode="month" color="state"
                      quick_add="False" event_limit="4">
                <field name="name"/>
                <field name="state"/>
            </calendar>
        </field>
    </record>

    <record id="view_advertise_form" model="ir.ui.view">
        <field name="name">real.estate.form</field>
        <field name="model">real.estate</field>
        <field name="arch" type="xml">

            <form>
                <header>
                    <button name="send_email" type="object" string="Send By Email"
                            attrs="{'invisible':[('state','in', ['new','offer_received'])]}"/>
                    <button name="action_share_whatsapp" type="object" string="Notify on Whatsapp"
                    />

                    <button name="action_offer_received" string="Offer Received" type="object" class="btn-primary"
                            attrs="{'invisible':[('state','not in', 'new')]}"/>
                    <button name="action_offer_accept" string="Offer Accept" type="object" class="btn-primary"
                            attrs="{'invisible':[('state','not in', ['new','offer_received'])]}"/>
                    <button name="action_cancel" string="Cancel" type="object" class="btn-primary"
                            attrs="{'invisible':[('state','in', ['cancel'])]}"/>
                    <button name="action_solds" string="Sold" type="object" class="btn-primary"
                            attrs="{'invisible':[('state','in', ['sold'])]}"/>
                    <button name="action_reset_new" string="RESET STATE" type="object" class="btn-primary"
                            attrs="{'invisible':[('state','not in', 'cancel')]}"/>

                    <!--                    <button name="print_reports" string="Print" type="object" class="btn-primary"-->
                    <!--                            attrs="{'invisible':[('state','not in',['sold','offer_accepted'])]}"/>-->
                    <field name="state" widget="statusbar" nolabel="1" options="{'clickable': '1'}"/>
                </header>
                <sheet>
                    <div class="oe_button_box" name="button_box">

                        <button class="oe_stat_button" type="object" name="action_invoice_status" icon="fa-file-text-o"
                                attrs="{'invisible': [('state', '=', 'new')]}">
                            <field name="invoice" widget="statinfo" string="Invoice Status"
                                   style="font-weight: bold;"/>
                        </button>

                        <button class="oe_stat_button" type="object" name="action_whatsapp_chat" icon="fa-whatsapp">
                            <field name="whatsapp_chat" widget="statinfo" string="Let's Chat"
                                   style="font-weight: bold;"/>
                        </button>

                        <button class="oe_stat_button" type="object" name="action_count_tags" icon="fa-tags">
                            <field name="count_tags" widget="statinfo" string="Tagged Property"
                                   style="font-weight: bold;"/>
                        </button>

                        <button class="oe_stat_button" type="object" name="action_count_offer" icon="fa-ticket"
                                attrs="{'invisible': [('state', '=', 'new')]}">
                            <field name="count_offer" widget="statinfo" string="Offers" style="font-weight: bold;"/>
                        </button>


                    </div>

                    <widget name="web_ribbon" title="New" bg_color="bg-danger"
                            attrs="{'invisible':[('state','not in','new')]}"/>
                    <widget name="web_ribbon" title="Offer Received" bg_color="bg-info"
                            attrs="{'invisible':[('state','not in','offer_received')]}"/>
                    <widget name="web_ribbon" title="Offer Accept" bg_color="bg-success"
                            attrs="{'invisible':[('state','not in','offer_accepted')]}"/>
                    <widget name="web_ribbon" title="Sold" bg_color="bg-warning"
                            attrs="{'invisible':[('state','not in','sold')]}"/>
                    <widget name="web_ribbon" title="Cancelled" bg_color="bg-danger"
                            attrs="{'invisible':[('state','not in','cancel')]}"/>
                    <group>
                        <div class="oe_title">
                            <h2>
                                <label for="name" string="Title" class="oe_edit_only"/>
                                <field name="name"
                                       style="border-radius:10px;width:60%;height:30px; background-color:honeydew;text-align:center;font-weight:bold;"/>
                            </h2>
                        </div>
                        <group>
                            <field name="image" widget="image" class="oe_avatar"/>
                        </group>
                    </group>
                    <group>
                        <group>
                            <field name="tag_ids" widget="many2many_tags"
                                   options="{'color_field':'color' ,'no_create_edit':True,'no_create':True}"/>
                            <field name="property_type_id" string="Property Type"
                                   options="{'no_create_edit':True,'no_create':True}"/>
                            <field name="postcode" string="Postcode" style="border-radius:6px;border:1px solid blue;"/>
                        </group>
                        <group>
                            <field name="expected_price" string="Expected Price"/>
                            <field name="date_availability"/>
                            <field name="selling_price"/>
                            <field name="best_offer"/>

                        </group>
                        <group>

                        </group>
                    </group>

                    <!--                    For Password Validation on click Sale-->
                    <div class="oe_title">
                        <h2 style="font-family:Lobster;color:green;"
                            attrs="{'invisible':[('state','!=','offer_accepted')]}">
                            Please Entered Password Before Sold the Property!!
                        </h2>
                    </div>
                    <group>
                        <field name="password" widget="password" attrs="{'invisible':[('state','!=','offer_accepted')]}"
                               string="Enter Password" placeholder="Please Enter DB Password For Sold The Property"/>
                    </group>
                    <footer>
                        <button string="Verify" attrs="{'invisible':[('state','!=','offer_accepted')]}" type="object"
                                name="action_verify_password" class="btn-primary"/>
                    </footer>

                </sheet>
                <notebook>
                    <page string="Descriptions" name="description">
                        <form>
                            <group>
                                <group>
                                    <field name="description" string="Description" colspan="3"
                                           style="color:red;font-size:14px;font-weight:bold;"/>
                                    <field name="living_area" string="Living Area(sqm)" colspan="3"
                                           style="border-radius:8px;border:1px dotted blue; font-size:15px;font-weight:bold;"/>
                                    <field name="garage" string="Garage" colspan="3"/>
                                    <field name="facades" string="Facades" colspan="3" style="width:50px;"/>
                                    <field name="garden_area" string="Garden Area(Sqm)"
                                           attrs="{'invisible':[('garden','=', False)]}"
                                           style="font-size:15px;font-weight:bold;"/>
                                    <field name="bedrooms" string="Bedroom" colspan="3"/>
                                    <field name="garden" string="Garden"/>
                                    <field name="garden_orientation" string="Orientation" colspan="3"
                                           attrs="{'invisible':[('garden','=', False)]}"/>
                                    <field name="active" string="Active" colspan="3"/>
                                    <br/>
                                    <field name="total_area"/>
                                </group>
                            </group>
                        </form>
                    </page>
                    <page string="Other Info" name="other_info">
                        <form>
                            <group>
                                <group>
                                    <field name="sales_person" string="Sales Person"/>
                                    <field name="sale_buyer" string="Buyer"/>
                                </group>
                                <group>
                                    <field name="sales_person_email" string="Seller Mail"/>
                                    <field name="sale_buyer_email" string="Buyer Mail"/>
                                </group>
                            </group>
                        </form>
                    </page>
                    <page string="Offer">
                        <field name="offer_ids"
                               attrs="{'readonly':[('state', 'in',['offer_accepted','sold','cancel'] )]}">
                            <tree editable="bottom" decoration-success="status=='accepted'"
                                  decoration-danger="status == 'refused'">
                                <field name="property_id" options="{'no_create_edit':True,'no_create':True}"/>
                                <field name="price"/>
                                <field name="partner_id"/>
                                <field name="validity" string="Validity(Days)"/>
                                <field name="deadline" string="Deadline"/>
                                <button name="action_accept" type="object" class="fa fa-check btn-success"
                                        attrs="{'invisible':[('status', '==', 'accepted')]}"/>
                                <button name="action_refused" type="object" class="fa fa-times btn-danger"
                                        attrs="{'invisible':[('status','==' , 'refused')]}"/>
                                <field name="status" string="Status"/>
                            </tree>
                        </field>
                    </page>
                    <page string="Agent Details">
                        <form>
                            <sheet>
                                <group>
                                    <group>
                                        <field name="agent_id" style="color:blue;font-weight:bold;"/>
                                        <field name="agent_mail"/>
                                        <field name="agent_phone"/>
                                    </group>
                                    <group>
                                        <group>
                                            <field name="agent_pic" widget='image'/>
                                            <field name="agent_address"/>
                                            <field name="sell_month_expected"/>
                                        </group>
                                    </group>
                                </group>
                            </sheet>
                        </form>
                    </page>

                    <page string="3D Model Views">
                        <field name="model_viewer_pic" widget="model_viewer" style="width:800px;height:450px;;"/>
                    </page>

                </notebook>
                <div class="oe_chatter">
                    <field name="message_follower_ids" groups="base.group_user"/>
                    <field name="activity_ids"/>
                    <field name="message_ids"/>
                </div>
            </form>
        </field>
    </record>

    <record id="action_real_estate" model="ir.actions.act_window">
        <field name="name">Properties</field>
        <field name="type">ir.actions.act_window</field>
        <field name="res_model">real.estate</field>
        <field name="view_mode">tree,form,search,kanban,graph,calendar</field>
        <field name="context">
            {'search_default_filter_active':1,'search_default_group_by_property':1 }
        </field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create Your first Housing Estate !!
            </p>
        </field>
    </record>
</odoo>


from odoo import models, fields

class AccountMove(models.Model):
    _inherit = 'account.move'

    property_name = fields.Char(string='Property Name')
    property_price = fields.Float(string='Property Price')
    # Add other property-related fields as needed


class SaleOrder(models.Model):
    _inherit = 'sale.order'

    @api.multi
    def create_invoice(self):
        # Create the invoice
        invoice_values = {
            'partner_id': self.partner_id.id,
            'invoice_line_ids': [],  # Assuming you will add invoice lines separately
            'property_name': self.property_name,
            'property_price': self.property_price,
            # Add other fields as needed for invoicing
        }
        invoice = self.env['account.move'].create(invoice_values)

        return invoice
from odoo import models, fields, api

class SaleOrder(models.Model):
    _inherit = 'sale.order'

    agent_id = fields.Many2one('res.partner', string='Agent')
    brokerage = fields.Float(string='Brokerage')

    @api.onchange('amount_total', 'agent_id')
    def _compute_brokerage(self):
        # Calculate brokerage based on a percentage of the sale amount
        brokerage_percentage = 5.0  # Example: 5% brokerage
        for order in self:
            if order.amount_total and order.agent_id:
                order.brokerage = (order.amount_total * brokerage_percentage) / 100.0

    def action_confirm(self):
        res = super(SaleOrder, self).action_confirm()
        # Set brokerage when the sale order is confirmed
        for order in self.filtered(lambda o: o.agent_id and not o.brokerage):
            order._compute_brokerage()
        return res

class AccountPayment(models.Model):
    _inherit = 'account.payment'

    sale_order_id = fields.Many2one('sale.order', string='Sale Order')

    @api.model
    def default_get(self, fields_list):
        res = super(AccountPayment, self).default_get(fields_list)
        active_model = self.env.context.get('active_model')
        active_id = self.env.context.get('active_id')

        if active_model == 'sale.order' and active_id:
            sale_order = self.env['sale.order'].browse(active_id)
            res['partner_id'] = sale_order.agent_id.id
            res['sale_order_id'] = sale_order.id
        return res


<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>
        <!-- Extend the sale order form view -->
        <record id="view_sale_order_form_inherit_brokerage" model="ir.ui.view">
            <field name="name">sale.order.form.inherit.brokerage</field>
            <field name="model">sale.order</field>
            <field name="inherit_id" ref="sale.view_order_form"/>
            <field name="arch" type="xml">
                <!-- Add fields for agent and brokerage -->
                <xpath expr="//sheet/notebook/page/field[@name='order_line']/form/group" position="after">
                    <group>
                        <field name="agent_id"/>
                        <field name="brokerage"/>
                    </group>
                </xpath>
            </field>
        </record>
    </data>
</odoo>


